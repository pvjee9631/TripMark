const map = L.map('map').setView([47.918873, 106.917701], 6); // UB —Ç”©–≤

// OpenStreetMap —Å—É—É—Ä—å –∑—É—Ä–∞–≥
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  attribution: '&copy; OpenStreetMap contributors'
}).addTo(map);

let tempLatLng = null; // –¢“Ø—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ö–∞–¥–≥–∞–ª–∞—Ö

// –ì–∞–∑—Ä—ã–Ω –∑—É—Ä–∞–≥ –¥—ç—ç—Ä –¥–∞—Ä–∞—Ö–∞–¥ popup form –Ω—ç—ç—Ö
map.on('click', function(e) {
  tempLatLng = e.latlng;
  document.getElementById("popup-form").classList.remove("hidden");
});

// Popup form-–æ–æ—Ä –≥–∞–∑–∞—Ä —Ö–∞–¥–≥–∞–ª–∞—Ö
function submitPlace() {
  const name = document.getElementById("place-name").value.trim();
  const comment = document.getElementById("place-comment").value.trim(); // ‚úè comment –∞–≤–∞—Ö
  const fileInput = document.getElementById("place-image");
  const file = fileInput.files[0];

  if (!name || !tempLatLng) return alert("–ì–∞–∑—Ä—ã–Ω –Ω—ç—Ä—ç—ç –æ—Ä—É—É–ª–Ω–∞ —É—É");

  const placeData = {
    name,
    lat: tempLatLng.lat,
    lon: tempLatLng.lng,
    image: null,
    comment
  };

  if (file) {
    const reader = new FileReader();
    reader.onload = function(e) {
      placeData.image = e.target.result;
      saveSearchHistory(placeData);
      resetForm();
    };
    reader.readAsDataURL(file);
  } else {
    saveSearchHistory(placeData);
    resetForm();
  }
}


// Form —Ü—ç–≤—ç—Ä–ª—ç—Ö
function resetForm() {
  document.getElementById("popup-form").classList.add("hidden");
  document.getElementById("place-name").value = "";
  document.getElementById("place-image").value = "";
  document.getElementById("place-comment").value = "";
  tempLatLng = null;
}

function searchLocation() {
  const query = document.getElementById("search-input").value.trim();
  if (!query) return;

  const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&accept-language=mn`;

  fetch(url)
    .then(res => res.json())
    .then(data => {
      if (data && data.length > 0) {
        const place = data[0];
        const lat = parseFloat(place.lat);
        const lon = parseFloat(place.lon);

        map.setView([lat, lon], 10);

        // üåü –•–∞–¥–≥–∞–ª–∞—Ö–≥“Ø–π, —Ö–∞—Ä–∏–Ω —Ñ–æ—Ä–º –≥–∞—Ä–≥–∞–∂ ”©–≥–Ω”©
        tempLatLng = { lat, lng: lon }; // –¥–∞—Ä–∞–∞ —Ö–∞–¥–≥–∞–ª–∞—Ö “Ø–µ–¥ –∞—à–∏–≥–ª–∞–Ω–∞
        document.getElementById("popup-form").classList.remove("hidden");

        // –•–∞–π—Å–∞–Ω –Ω—ç—Ä–∏–π–≥ —É—Ä—å–¥—á–∏–ª–∞–Ω –æ—Ä—É—É–ª–∂ ”©–≥—á –±–æ–ª–Ω–æ
        document.getElementById("place-name").value = place.display_name;
      } else {
        alert("–ì–∞–∑—Ä—ã–≥ –æ–ª—Å–æ–Ω–≥“Ø–π.");
      }
    })
    .catch(err => {
      console.error("–ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:", err);
      alert("–•–∞–π–ª—Ç —Ö–∏–π—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.");
    });
}


document.getElementById("close-form").addEventListener("click", () => {
  document.getElementById("popup-form").classList.add("hidden");
  resetForm(); // input-—É—É–¥—ã–≥ —Ü—ç–≤—ç—Ä–ª—ç–Ω—ç
});

// –•–∞–π–ª—Ç—ã–Ω —Ç“Ø“Ø—Ö —Ö–∞–¥–≥–∞–ª–∞—Ö
function saveSearchHistory(place) {
  let history = JSON.parse(localStorage.getItem("searchHistory")) || [];

  const alreadyExists = history.some(p =>
    p.name === place.name && p.lat === place.lat && p.lon === place.lon
  );

  if (!alreadyExists) {
    history.push(place);
    localStorage.setItem("searchHistory", JSON.stringify(history));
    renderSearchHistory();
    drawMarker(place); // Marker –∑—É—Ä–Ω–∞
  }
}

// Marker –∑—É—Ä–Ω–∞
function drawMarker(place) {
  let popupContent = `<b style="font-size: 16px; color: #222;">${place.name}</b>`;

  if (place.comment) {
    popupContent += `
      <div style="margin-top: 8px; padding: 6px 8px; background: #f9f9f9; border-left: 3px solid #0077cc; font-style: italic; font-size: 13px; color: #333;">
        ${place.comment}
      </div>`;
  }

  if (place.image) {
    popupContent += `<br><img src="${place.image}" width="150" style="margin-top: 10px; border-radius: 4px; box-shadow: 0 1px 5px rgba(0,0,0,0.2);">`;
  }

  const marker = L.marker([place.lat, place.lon])
    .addTo(map)
    .bindPopup(popupContent);

  allMarkers.push({ marker, lat: place.lat, lon: place.lon });
}



// UI –¥—ç—ç—Ä —Ç“Ø“Ø—Ö–∏–π–≥ —Ö–∞—Ä—É—É–ª–∞—Ö –±–∞ marker-—É—É–¥—ã–≥ —Å—ç—Ä–≥—ç—ç—Ö
function renderSearchHistory() {
  const history = JSON.parse(localStorage.getItem("searchHistory")) || [];
  const listEl = document.getElementById("search-history");
  listEl.innerHTML = "";

  history.forEach(place => {
    const li = document.createElement("li");
    // li.textContent = place.name;
    // li.title = `${place.lat.toFixed(4)}, ${place.lon.toFixed(4)}`;
    // li.onclick = () => {
    //   map.setView([place.lat, place.lon], 10);
    // };
    li.innerHTML = `
  <span class="place-name">${place.name}</span>
  <button class="delete-btn">‚ùå</button>
`;
li.title = `${place.lat.toFixed(4)}, ${place.lon.toFixed(4)}`;

// –ì–∞–∑—Ä—ã–≥ –¥–∞—Ä–∂ —Ç”©–≤–ª”©—Ä”©—Ö
li.querySelector(".place-name").onclick = () => {
  map.setView([place.lat, place.lon], 10);
};

// –£—Å—Ç–≥–∞—Ö —Ç–æ–≤—á
li.querySelector(".delete-btn").onclick = (e) => {
  e.stopPropagation(); // –ì–∞–∑—Ä—ã–Ω —Ç”©–≤–ª”©—Ä”©–ª –∏–¥—ç–≤—Ö–∂–∏—Ö—ç—ç—Å —Å—ç—Ä–≥–∏–π–ª–Ω—ç
  deletePlace(place);
};

    listEl.appendChild(li);

    drawMarker(place); // Marker —Å—ç—Ä–≥—ç—ç—Ö
  });
}

// –ì–∞–∑—Ä—ã–Ω —Ç“Ø“Ø—Ö–∏–π–≥ —É—Å—Ç–≥–∞—Ö
function deletePlace(placeToDelete) {
  let history = JSON.parse(localStorage.getItem("searchHistory")) || [];
  history = history.filter(p =>
    !(p.name === placeToDelete.name && p.lat === placeToDelete.lat && p.lon === placeToDelete.lon)
  );
  localStorage.setItem("searchHistory", JSON.stringify(history));
  renderSearchHistory(); // UI –¥–∞—Ö–∏–Ω –∑—É—Ä–∞—Ö
}

let allMarkers = []; // üî∏ –±“Ø—Ö marker-—É—É–¥—ã–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö

function renderSearchHistory() {
  // üî¥ –ì–∞–∑—Ä—ã–Ω –∑—É—Ä–∞–≥ –¥—ç—ç—Ä—Ö marker-—É—É–¥—ã–≥ —ç—Ö–ª—ç—ç–¥ —É—Å—Ç–≥–∞–Ω–∞
  allMarkers.forEach(m => map.removeLayer(m.marker));
  allMarkers = [];

  const history = JSON.parse(localStorage.getItem("searchHistory")) || [];
  const listEl = document.getElementById("search-history");
  listEl.innerHTML = "";

  history.forEach(place => {
    const li = document.createElement("li");
    li.innerHTML = `
      <span class="place-name">${place.name}</span>
      <button class="delete-btn">‚ùå</button>
    `;
    li.title = `${place.lat.toFixed(4)}, ${place.lon.toFixed(4)}`;

    li.querySelector(".place-name").onclick = () => {
      map.setView([place.lat, place.lon], 10);
    };
    li.querySelector(".delete-btn").onclick = (e) => {
      e.stopPropagation();
      deletePlace(place);
    };
    listEl.appendChild(li);

    drawMarker(place);
  });
}


// –•—É—É–¥–∞—Å –∞—á–∞–∞–ª–∞—Ö–∞–¥ marker-—É—É–¥–∞–∞ —Å—ç—Ä–≥—ç—ç—Ö
renderSearchHistory();
